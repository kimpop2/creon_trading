1. 프로젝트 개요
Creon 자동매매 시스템은 주식 투자 경험이 많지 않은 분들도 손쉽게 자동으로 주식 매매를 할 수 있도록 설계된 프로그램입니다.
이 시스템은 증권사에서 제공하는 Creon HTS(홈트레이딩시스템)와 연동하여,
실시간으로 주식 시세를 수집하고, 미리 설정된 전략에 따라 자동으로 매수/매도 주문을 실행합니다.
1.2 폴더 및 파일 구성 안내
api/ : Creon API와 직접 통신하는 모듈
manager/ : 데이터베이스, 트레이딩, 백테스트 등 각종 매니저
trading/ : 자동매매, 백테스팅의 핵심 로직(전략 실행, 주문, 데이터 업데이트, 백테스팅 등)
strategies/ : 다양한 투자 전략 구현
optimizer/: 전략 파라미터 최적화 모듈
feeds/ : 시세, 뉴스 등 데이터 수집 모듈
util/ : 텔레그램 알림, 보조 함수 등
config/ : 환경설정 파일
setup/ : 초기화, 자동 로그인 등 시작 스크립트
logs/ : 시스템 로그 파일 저장 폴더
tests/: TDD 방식 개발을 위한 단위 테스트, 시나리오 테스트 파일

2. 자동매매 엔진(trading) 기능 안내
trading 폴더는 이 프로젝트의 “두뇌” 역할을 하는 핵심 모듈로,
실제 매매 전략 실행, 데이터 업데이트, 주문 처리, 실시간 모니터링 등
자동매매의 모든 흐름을 총괄합니다.
2.1 주요 역할
실시간 데이터 관리
Creon API로부터 실시간 시세, 거래량, 체결 정보 등을 받아와
자동매매에 필요한 데이터로 가공·저장합니다.
전략 실행 및 신호 생성
사용자가 선택한 전략(예: 이동평균, 모멘텀 등)에 따라
매수/매도 신호를 자동으로 생성합니다.
전략별로 종목 선정, 매수/매도 타이밍, 투자 비중 등을 자동으로 계산합니다.
주문 및 체결 관리
전략 신호에 따라 Creon API를 통해 자동으로 주문(매수/매도/정정/취소)을 실행합니다.
주문이 체결되면, 보유 종목과 잔고 정보를 실시간으로 갱신합니다.
미체결 주문, 부분 체결 등도 자동으로 관리합니다.
포트폴리오 및 리스크 관리
여러 종목을 동시에 관리하며, 투자 비중, 손실 제한(손절), 이익 실현(익절) 등
포트폴리오 전체의 리스크를 자동으로 조절합니다.
실시간 모니터링 및 알림
시스템의 상태, 전략 신호, 거래 내역 등 주요 이벤트를
로그 파일과 텔레그램 등으로 실시간 알림합니다.
2.2 주요 파일
trading/trading.py
전체 자동매매 시스템의 오케스트레이션(데이터 업데이트, 전략 실행, 주문 처리 등)을 담당합니다.
trading/brokerage.py
주문, 체결, 포지션(보유 종목) 관리 등 실제 매매와 관련된 세부 로직을 담당합니다.

3. 백테스팅(Backtesting) 기능 안내
백테스팅이란,
과거의 실제 주가 데이터와 거래 조건을 이용해
“내가 이 전략으로 투자를 했더라면 어떤 결과가 나왔을까?”를
미리 시뮬레이션해보는 기능입니다.
3. 1 주요 목적
전략의 신뢰성 검증
실제 투자 전에, 전략이 과거 시장에서 얼마나 잘 작동했는지 확인할 수 있습니다.
리스크(손실 위험) 파악
최대 손실, 변동성, 연속 손실 등 다양한 위험 지표를 미리 알 수 있습니다.
성과 비교
여러 전략, 여러 파라미터 조합의 수익률을 한눈에 비교할 수 있습니다.
3.2 시스템 내 백테스팅 구조
manager/backtest_manager.py
백테스트 실행, 결과 집계, 거래 내역 분석 등 백테스팅의 핵심 로직을 담당합니다.
trading/backtest.py
실제 전략 실행, 가상 주문/체결, 포트폴리오 관리 등 백테스트 시뮬레이션을 구현합니다.
optimizer/
다양한 전략/파라미터 조합을 자동으로 백테스트하여, 최적의 조건을 찾는 데 활용됩니다.

4. 전략 최적화(optimizer) 기능 안내
optimizer 폴더는 자동매매 시스템의 핵심 전략(예: 이동평균선 기간, 모멘텀 기간 등)의 성능을 극대화하기 위해
여러 가지 최적화 알고리즘을 제공합니다.
즉, “어떤 전략 파라미터가 가장 좋은 수익률을 내는가?”를 자동으로 탐색해주는 기능입니다.
4.1 주요 파일 및 기능
bayesian_optimizer.py
베이지안 최적화 기법을 사용하여, 전략의 파라미터(예: 이동평균 기간, 손절/익절 비율 등)를 효율적으로 탐색합니다.
기존의 무작위/그리드 탐색보다 적은 시도로 더 좋은 결과를 찾을 수 있습니다.
grid_search_optimizer.py
가장 직관적인 방식으로, 여러 파라미터 조합을 하나씩 모두 실험해보는 “그리드 서치” 방식의 최적화 도구입니다.
단순하지만, 파라미터가 많아질수록 시간이 오래 걸릴 수 있습니다.
progressive_refinement_optimizer.py
점진적으로 범위를 좁혀가며(정밀하게) 최적의 파라미터를 찾는 고급 최적화 도구입니다.
처음에는 넓은 범위에서 대략적으로 탐색하고, 점점 더 세밀하게 파라미터를 조정합니다.

