백테스팅 프로그램을 만들었다.
이 시스템은 일봉전략으로 듀얼 모멘텀 전략과 분봉전략으로 RSI 전략을 결합하여 
장기적 모멘텀과 단기적 매매 기회를 동시에 포착하는 하이브리드 전략을 구현하고 있습니다. 
일봉 데이터로 듀얼 모멘텀을 계산하여 장기 포트폴리오를 구성하고, 
분봉 데이터로 RSI를 계산하여 단기 매매 기회를 포착하는 방식으로 작동합니다.
일봉전략과 분봉전략은 백테스트에 주입하는 방식으로 다양한 전략을 추가로 개발햐여 결합할 수 있습니다.
현재 듀얼 모멘텀과 RSI 전략은 각각 일봉전략과 분봉전략의 기본전략으로 개발되었습니다.

주요 특징과 구성요소를 설명드리겠습니다:
# 프로그램 개요
- 시작 파일명: run_backtest.py
* 목적: 일봉 전략(듀얼 모멘텀, 모멘텀) + 분봉 전략(RSI 전략) 을  백테스팅

## 주요 구성요소:
### /api
- CreonAPIClient: 크레온 API 연동
* 증권사 api - 현재 대신증권 creon api 사용 중

### /selector (개발 중)
- StockSelector : 종목 선정 (기본적+기술적 분석 만족하는 종목 선정)
- ThemeSelector: 테마종목 선정 (현 시점의 주도테마와 주도주 선정)

### /strategies : 일봉/분봉전략->Backtester에 주입 (새로운 전략 개발 예정)
- DualMomentumDaily: 일봉 기반 듀얼 모멘텀 전략
- RSIMinute: 분봉 기반 RSI 전략
* 다수 일봉 기반 전략, 다수의 분분 기반 전략 개발 예정

### /backtest
- Backtester: 백테스팅 엔진 - /strategies 의 일봉 전략 과 분봉 전략을 주입 받아 백테스트
- Broker: 거래 실행 및 포트폴리오 관리 -> Backtester 에 주입할 예정
- Repoter( 개발 예정): 백테스팅 결과 분석/출력/DB 저장 

### /manager
- DataManager: DB, api, 화면면 등 다양한 데이터 소스간에 데이터 처리
- DBManager: MariaDB 테이블 단위 앱력/출력, 각종 조회
- SetupManager (개발 예정): 각종 데이터 소스를 통한 초기 데이터 입력, 일일 데이터 셋업 (주로 과거데이터 수집용)
- FeedManager (개발 예정): 각종 데이터를 다양한 방법으로 수집하여 DB에 저장 (feeder 모듈과 관련)
- UIManager (개발 예정): 응용프로그램 화면과 DB, 프로그램간의 데이터 교환
* DB - 현재 MariaDB 사용 중
* UI - pyQt5 사용 예정

### /optimizer (개발 중) - 최적화
- 장세(강세장/약세장/추세전환기)에 따른 전략별 파라미터 최적화
- 일봉전략 분봉전략 조합 최적화 

### /feeder (개발 예정) - 수집기 : 각종 데이터를 다양한 방법으로 수집
- NewsFeeder : 증권사 API 연동해서 뉴스에 관련된 데이터 수집 (뉴스, 지표 신호)
- TelegramFeeder : 텔레그램 채널들 에서 데이터 수집
- RealtimeFeeder : 증권사 API 연동해서 실시간 구독 데이터 수집 (현재가, 호가, 체결)
- CrawlingFeeder : 웹사이트의 페이지들을 크롤링 하여 데이터 수집
- OCRFeeder : Win32com 을 이용해서 윈도우 어플리케이션 특정 창과 OCR할 영역을 스캔하여 의미있는 데이터 수집
- AiFeeder : chatGpt, Gemini 등과 프롬프트를 통한 데이터 수집

### /trader - 매매기 (개발 예정)
- 자동매매 실행
*/strategies Backtester 처럼 일봉 전략 과 분봉 전략을 주입 받아 자동매매 실행

### /ui (개발예정)
- 응용프로그램 화면구성

### /analyzer (개발 예정)
- 백테스팅, 자동매매결과 분석
- 결과분석에는 통계, 머신러닝, AI api 사용

### /tests 
- 각 클래스 모듈 단위 테스트
- 기능별 통합 테스트

## 전략 구성:
a) 듀얼 모멘텀 전략 (DualMomentumDaily)
- 모멘텀 계산 기간: 20일
- 리밸런싱 요일: 월요일 (1)
- 상위 7개 종목 선택
안전자산: 국고채 ETF (A439870)
b) RSI 분봉 전략 (RSIMinute)
- RSI 기간: 14분
- 과매도: 30
- 과매수: 70

## 투자 대상 섹터:
- 반도체, 2차전지, 바이오, 플랫폼/인터넷, 자동차 등 15개 섹터
- 각 섹터별 대표 종목들 포함
- 총 약 70개 이상의 종목 대상

## 주요 기능:
- 일봉/분봉 데이터 자동 수집 및 캐싱
- 듀얼 모멘텀과 RSI 전략의 동시 운영
- 포트폴리오 리밸런싱
- 손절매 관리 (현재는 비활성화 상태)
- 상세한 로깅 시스템

## 구성클래스 기능
### CreonAPIClient
- 크레온 API와의 연동을 담당하는 클래스
- 주요 기능:
* 일봉/분봉 데이터 조회
* 종목 코드 및 이름 조회
* 실시간 시세 조회
* API 연결 상태 관리
### Backtester
- 백테스팅의 핵심 엔진 역할
- 주요 기능:
* 초기 자본금: 1,000만원
* 수수료율: 0.015% (기본값)
* 데이터 저장소 관리 (일봉/분봉)
* 듀얼 모멘텀과 RSI 전략 실행
* 포트폴리오 성과 지표 계산 -> Report 로 옮길예정
* 매매 시그널 생성 및 실행
### Broker
- 실제 거래 실행을 시뮬레이션하는 클래스
- 주요 기능:
* 현금 및 포지션 관리
* 주문 실행 시뮬레이션
* 수수료 계산
* 포트폴리오 가치 계산
* 매매 기록 관리
### DualMomentumDaily
- 일봉 기반 듀얼 모멘텀 전략 구현
- 주요 파라미터:
* 모멘텀 계산 기간: 20일
* 리밸런싱 요일: 월요일 (1)
* 상위 7개 종목 선택
* 안전자산: 국고채 ETF (A439870)
- 주요 기능:
* 모멘텀 스코어 계산
* 종목 순위 매기기
* 매수/매도 시그널 생성
### RSIMinute
- 분봉 기반 RSI 전략 구현
- 주요 파라미터:
* RSI 기간: 45분
* 과매수 기준: 65
* 과매도 기준: 35
- 매매 시간 설정:
* 매수 시작: 10:00
* 매도 시작: 09:05
* 강제 매수: 15:20
* 강제 매도: 15:25
- 주요 기능:
* RSI 계산
* 매수/매도 시그널 생성
* 시간 기반 매매 실행
### DataManager
- 데이터 관리 및 캐싱을 담당하는 클래스
- 주요 기능:
* 일봉/분봉 데이터 관리
* 데이터베이스 연동
* 데이터 업데이트 및 캐싱
* 종목 정보 관리
* 데이터 정합성 검증

(예정) 으로 표시된 것은 앞으로 개발해야 할 모듈들이다.
이제부터 개발된 코드와 
기능 추가를 위한 요구사항을 보내줄테니까.
'작업시작' 명령을 하기 전에는 아무작업도 하지 말고 대기해 주기 바란다.


# ---------------------------------------
# 파일전송
# ---------------------------------------

# 작업 원칙
- 기존 메서드 이름과 내부코드는 고치지 마라. (현재 잘 작동하는 프로그램 이므로)
- 파일 및 클래스 명도 그대로 유지해라
- set_strategies 메소드 추가는 가능하다.
- 위에서 허용한 이외의 변경은 나에게 허락을 맡고 진행해라.
- 추상화와 의존성 주입(Dependency Injection) 기법을 사용해라
- 전략 주입 때문에 정말 고쳐야 한다면 먼저 나에게 허락을 받아라
유연한 전략 조합 및 백테스팅 기능개발에 중점을 두고, 최종목표 달성하도록 작업을 진행하려고 한다.

# '작업시작' --------------------------------------------------------
# 요구사항
현재의 프로그램은 일봉전략 및 분봉전략이 백테스팅 모듈과 강하게 결합되어 교체되기 힘들게 되어 있다.
3. 유연한 전략 조합 및 백테스팅 기능개발에 중점을 두고, 최종목표 달성하도록 작업을 진행하려고 한다.
이런 관점에서 작업을 시작한다.
- 전략은 추상메서드에서 상속하는 데, 일봉전략용 추상메서드 와 분봉전략용 추상메서드를 나누어라
- 파일 추가는 추상메서드 2개만 있으면 되겠다.

최종 작업 계획 (순차적 진행)
1. 추상 전략 클래스 추가:
- strategies 디렉토리에 strategy_base.py 파일을 생성합니다.
-- 이 파일 안에 두 개의 추상 기본 클래스를 정의합니다.
-- DailyStrategy (일봉 전략용 추상 클래스)
-- MinuteStrategy (분봉 전략용 추상 클래스)
-- 각 추상 클래스는 전략이 구현해야 할 추상 메서드를 정의합니다.
-- 데이터 접근 및 브로커 연동: data_store, strategy_params, broker, position_info 등은 
   전략 인스턴스 생성 시 파라미터로 전달받도록 추상 클래스 __init__에 포함할 수 있도록 유도합니다.

2. 기존 전략 클래스 (DualMomentumDaily, RSIMinute) 수정:
- strategies.py의 DualMomentumDaily는 DailyStrategy를 상속하도록 변경합니다.
- rsi_minute_strategy.py의 RSIMinute는 MinuteStrategy를 상속하도록 변경합니다.
- 필요한 경우, 추상 메서드 요구사항을 맞추기 위한 래퍼(wrapper) 메서드 가능

3. Backtester 클래스 수정:
- Backtester에 set_strategies 메서드를 추가 
- DailyStrategy와 MinuteStrategy 타입의 전략 리스트 또는 딕셔너리를 파라미터로 받을 수 있도록 변경합니다.
- 인자 daily_strategies: DailyStrategy, minute_strategies: MinuteStrategy
- run 메서드 내에서 전략을 직접 생성하는 대신, 전달받은 전략 인스턴스의 로직을 호출
- 전략 간 데이터 공유: Backtester는 data_store, broker, position_info와 같은 핵심 공유 객체들을 계속 소유하고, 
  전략 인스턴스 초기화 시 이 객체들을 전달해줍니다. 
- 일봉 전략에서 생성된 시그널(momentum_signals)이 분봉 전략으로 전달되는 기존의 update_momentum_signals와 같은 메커니즘은 유지
- _get_minute_data_for_signal_dates와 같이 Backtester가 직접 데이터 로딩을 담당하는 부분은 그대로 유지합니다.


# -----------------------------------
# 앞으로 추가해야 할 기능
백테스팅 시스템의 기능을 엔진과 전략으로 구분하여 분석해드리겠습니다:
1. 백테스팅 엔진이 가져야 할 기능
1) 데이터 관리
분할 배당 데이터 처리
액면분할/병합 이벤트 처리
신규상장/상장폐지 종목 처리
거래정지 종목 처리
데이터 정합성 검증 강화
대용량 데이터 처리 최적화
2) 거래 실행 시뮬레이션
호가창 기반 주문 실행
슬리피지(호가 스프레드) 반영
시장 충격 비용 반영
부분 체결 시나리오 처리
주문 체결 지연 시뮬레이션
실제 거래소 수수료 체계 반영
3) 리스크 관리
최대 드로다운(DD) 제한
레버리지 관리
대용담보 비용 계산
대출 이자 비용 계산
포지션 한도 관리
섹터별 리스크 분산 제한
4) 성과 분석
상세한 백테스트 보고서 생성
전략별 성과 비교 시각화
리스크 지표 시각화
포트폴리오 구성 변화 시각화
거래 내역 상세 분석 리포트
월별/분기별 성과 분석
5) 시스템 안정성
에러 복구 메커니즘
메모리 사용량 최적화
로깅 시스템 강화
API 기반 외부 시스템 연동
다국가 시장 지원
다양한 자산 클래스 지원
2. 전략이 가져야 할 기능
1) 포지션 사이징
변동성 기반 포지션 사이징
켈리 공식 기반 포지션 사이징
리스크 기반 포지션 사이징
자본금 대비 최적 포지션 크기 계산
섹터별 포지션 한도 설정
개별 종목별 포지션 한도 설정
2) 시장 상황 대응
시장 상황별(상승장/하락장/횡보장) 전략 분리
변동성 구간별 전략 조정
거래량 기반 필터링
시장 심리 지표 반영
급락장 대응 로직
장중 급락/급등 대응
3) 전략 최적화
파라미터 최적화
전략 조합 최적화
과적합(Overfitting) 검증
몬테카를로 시뮬레이션
전략별 상관관계 분석
시장 상황별 최적 파라미터 설정
4) 진입/청산 로직
다중 진입/청산 조건
부분 청산 로직
트레일링 스탑 로직 강화
익절/손절 로직 세분화
시간 기반 청산 조건
가격 기반 청산 조건
5) 필터링 및 검증
거래량 필터
변동성 필터
섹터 강도 필터
시장 심리 지표 필터
기술적 지표 필터
펀더멘털 지표 필터
6) 전략 확장성
새로운 지표 추가 용이성
전략 조합 가능성
실시간 트레이딩 전환
백테스트/실전 전환
전략 파라미터 동적 조정
시장 상황별 전략 전환





