백테스팅 프로그램을 만들었다.
다음 기능을 가지고 있다.
- 일봉 데이터를 이용하여 듀얼모멘텀 전략으로 매수/매도 신호를 발생
- 신호 발생 다음날 분봉 데이터를 이용하여 RSI 전략 및 손절 전략으로 매수/매도 실행

앞으로 다음 기능을 추가하려 한다.
- 일봉 데이터를 이용한 다양한 전략 개발. 예) SMA (이평선 크로스) 전략, 볼린저밴드 매매 전략
- 일봉전략에서 매수/매도 시그널이 발생한 종목의 분봉 데이터를 이용한 다수의 전략 개발. 예) 신고가 돌파 전략, 뉴스 매매 전략(뉴스발생 급등시 매매)
- 다수의 일봉전략과 분봉전략 인스턴스를 Backtester 의 전략설정용 메서드(set_strategies)에 파라미터로 전달
- 백테스트 일봉전략 과 분봉 전략을 변경할 수 있는 기능
- 최종적인 목표는 동일한 백테스팅 조건(대상종목, 기간)에서, 전략의 구성에 따라 다른 백테스팅 결과를 비교할 수 있는 프로그램 개발

현재 개발된 백테스트 프로그램의 6개 모듈을 보내줄 것이다.
모든파일을 보내고 나서, '작업시작' 명령을 하기 전에는 아무작업도 하지 말고 대기해 주기 바란다.
지금 부터 시작하겠다.

현재의 프로그램은 일봉전략 및 분봉전략이 백테스팅 모듈과 강하게 결합되어 교체되기 힘들게 되어 있다.
3. 유연한 전략 조합 및 백테스팅 기능개발에 중점을 두고, 최종목표 달성하도록 작업을 진행하려고 한다.
이런 관점에서 작업을 시작한다.
- 전략은 추상메서드에서 상속하는 데, 일봉전략용 추상메서드 와 분봉전략용 추상메서드를 나누어라
- 파일 추가는 추상메서드 2개만 있으면 되겠다.

최종 작업 계획 (순차적 진행)
1. 추상 전략 클래스 추가:
- strategies 디렉토리에 strategy_base.py 파일을 생성합니다.
-- 이 파일 안에 두 개의 추상 기본 클래스를 정의합니다.
-- DailyStrategy (일봉 전략용 추상 클래스)
-- MinuteStrategy (분봉 전략용 추상 클래스)
-- 각 추상 클래스는 전략이 구현해야 할 추상 메서드를 정의합니다.
-- 데이터 접근 및 브로커 연동: data_store, strategy_params, broker, position_info 등은 
   전략 인스턴스 생성 시 파라미터로 전달받도록 추상 클래스 __init__에 포함할 수 있도록 유도합니다.

2. 기존 전략 클래스 (DualMomentumDaily, RSIMinute) 수정:
- strategies.py의 DualMomentumDaily는 DailyStrategy를 상속하도록 변경합니다.
- rsi_minute_strategy.py의 RSIMinute는 MinuteStrategy를 상속하도록 변경합니다.
- 필요한 경우, 추상 메서드 요구사항을 맞추기 위한 래퍼(wrapper) 메서드 가능

3. Backtester 클래스 수정:
- Backtester에 set_strategies 메서드를 추가 
- DailyStrategy와 MinuteStrategy 타입의 전략 리스트 또는 딕셔너리를 파라미터로 받을 수 있도록 변경합니다.
- 인자 daily_strategies: DailyStrategy, minute_strategies: MinuteStrategy
- run 메서드 내에서 전략을 직접 생성하는 대신, 전달받은 전략 인스턴스의 로직을 호출
- 전략 간 데이터 공유: Backtester는 data_store, broker, position_info와 같은 핵심 공유 객체들을 계속 소유하고, 
  전략 인스턴스 초기화 시 이 객체들을 전달해줍니다. 
- 일봉 전략에서 생성된 시그널(momentum_signals)이 분봉 전략으로 전달되는 기존의 update_momentum_signals와 같은 메커니즘은 유지
- _get_minute_data_for_signal_dates와 같이 Backtester가 직접 데이터 로딩을 담당하는 부분은 그대로 유지합니다.

4. run_daily_minute.py 스크립트 수정:
Backtester 인스턴스를 생성한 후, DualMomentumDaily와 RSIMinute 인스턴스를 생성하여 Backtester 인스턴스.set_strategies 에 전달하도록 변경합니다.
향후 여러 전략을 조합할 때, 이런방식으로 Backtester에 전달하는 방식으로 일봉전략, 분봉전략을 유연하게 조합할 수 있게 됩니다.
데이터 흐름 (개선 후):

중앙 집중식 데이터 및 상태 관리: Backtester는 data_store, broker, position_info를 계속 관리하며, 이는 모든 전략 인스턴스에 공유됩니다.
전략 입력/출력:
일봉 전략: Backtester로부터 data_store, broker, strategy_params를 받아 일봉 단위로 실행됩니다. 
        주요 출력은 매수/매도 **"의도"**를 담은 시그널 (예: momentum_signals와 같은 구조)입니다.
분봉 전략: Backtester로부터 data_store, broker, strategy_params, position_info를 받고, 
        추가적으로 일봉 전략에서 생성된 "매매 의도" 시그널을 받습니다. 이를 바탕으로 분봉 데이터와 RSI를 분석하여 Broker에게 실제 **"매수/매도 주문"**을 요청합니다.
거래 결과: Broker가 매매를 실행하고, 그 결과는 Broker의 positions 및 trade_log에 기록되며, 이는 다시 Backtester의 포트폴리오 가치 계산에 활용됩니다.

가장 중요한 것
- 기존 메서드 이름과 내부코드는 고치지 마라. (현재 잘 작동하는 프로그램 이므로)
- 파일 및 클래스 명도 그대로 유지해라
- set_strategies 메소드 추가는 가능하다.
- 위에서 허용한 이외의 변경은 나에게 허락을 맡고 진행해라.
- 추상화와 의존성 주입(Dependency Injection) 기법을 사용해라
- 전략 주입 때문에 정말 고쳐야 한다면 먼저 나에게 허락을 받아라

유연한 전략 조합 및 백테스팅 기능개발에 중점을 두고, 최종목표 달성하도록 작업을 진행하려고 한다.

## 손절 관련 코드 제거
현재 개발된 백테스트 프로그램의 모든 모듈을 순차적으로 보내줄 것이다.
모든파일을 보내고 나서, '작업시작' 명령을 하기 전에는 아무작업도 하지 말고 대기해 주기 바란다.
지금 부터 시작하겠다.
가장 중요한 것
- 기존 메서드 이름과 내부코드는 고치지 마라. (현재 잘 작동하는 프로그램 이므로)
- 파일 및 클래스 명도 그대로 유지해라
- 위에서 허용한 이외의 변경은 나에게 허락을 맡고 진행해라.

보내준 파일에서 손절관련 로직을 제거하여 프로그램을 단순하게 만들어라